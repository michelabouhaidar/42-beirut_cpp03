/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ClapTrap.cpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha>                        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/24 13:20:42 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/09/26 21:32:55 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ClapTrap.hpp"
#include <iostream>

ClapTrap::ClapTrap() : name_("default"), pts_(10), nrg_pts_(10), atk_pts_(0)
{
	std::cout << "ClapTrap < " << name_ << " > constructor called." << std::endl;
}

ClapTrap::ClapTrap(const std::string& name) : name_(name), pts_(10), nrg_pts_(10), atk_pts_(0)
{
	std::cout << "ClapTrap < " << name_ << " > constructor called" << std::endl;
}

ClapTrap::ClapTrap(const ClapTrap& obj) : name_(obj.name_), pts_(obj.pts_), nrg_pts_(obj.nrg_pts_), atk_pts_(obj.atk_pts_)
{
	std::cout << "ClapTrap < " << name_ << " > copy constructor called" << std::endl;
}

ClapTrap& ClapTrap::operator=(const ClapTrap& obj)
{
	this->name_ = obj.name_;
	this->pts_ = obj.pts_;
	this->nrg_pts_ = obj.nrg_pts_;
	this->atk_pts_ = obj.atk_pts_;
	std::cout << "ClapTrap < " << name_ << " > copy assignment constructor called" << std::endl;
	return *this;
}

ClapTrap::~ClapTrap()
{
	std::cout << "ClapTrap < " << name_ << " > destructor called" << std::endl;
}

int ClapTrap::getHitPoints() const
{
	return pts_;
}

int ClapTrap::getEnergyPoints() const
{
	return nrg_pts_;
}

int ClapTrap::getAttackPoints() const
{
	return atk_pts_;
}

const std::string& ClapTrap::getName() const
{
	return name_;
}

void ClapTrap::attack(const std::string& target)
{
	if (pts_ <= 0)
	{
		std::cout << "ClapTrap < " << name_ << " > cannot attack (no hit points left)" << std::endl;
		return;
	}
	if (nrg_pts_ <= 0)
	{
		std::cout << "ClapTrap < " << name_ << " > cannot attack (no energy points left)" << std::endl;
		return;
	}
	--nrg_pts_;
	std::cout << "ClapTrap < " << name_ << " > attacks < " << target
	<< " >, causing < " << atk_pts_ << " > points of damage" << std::endl;

}
void ClapTrap::takeDamage(unsigned int amount)
{
	if (pts_ <= 0) {
		std::cout << "ClapTrap < " << name_ << " > is already at 0 HP" << std::endl;
		return;
	}
	int before = pts_;
	pts_ -= static_cast<int>(amount);
	if (pts_ < 0) pts_ = 0;
	std::cout << "ClapTrap < " << name_ << " > takes < " << amount << " > damage "
			  << "(HP: " << before << " -> " << pts_ << ")" << std::endl;
}

void ClapTrap::beRepaired(unsigned int amount)
{
	if (pts_ <= 0) {
		std::cout << "ClapTrap < " << name_ << " > can’t repair (no hit points left)" << std::endl;
		return;
	}
	if (nrg_pts_ <= 0) {
		std::cout << "ClapTrap < " << name_ << " > can’t repair (no energy points left)" << std::endl;
		return;
	}
	--nrg_pts_;
	int before = pts_;
	pts_ += static_cast<int>(amount);
	std::cout << "ClapTrap < " << name_ << " > repairs < " << amount << " > HP "
			  << "(HP: " << before << " -> " << pts_ << ")" << std::endl;
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   DiamondTrap.cpp                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha>                        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/26 13:00:44 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/09/26 22:39:04 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "DiamondTrap.hpp"
#include <iostream>

DiamondTrap::DiamondTrap() : ScavTrap(), FragTrap(), name_("default_clpa_name")
{
	ClapTrap::name_ = "default_clap_name";
	pts_ = 100;
	nrg_pts_ = 50;
	atk_pts_ = 30;
	std::cout << "DiamondTrap < " <<  name_ << " > construtor called" << std::endl;
}

DiamondTrap::DiamondTrap(const std::string& name) : ScavTrap(name), FragTrap(name), name_(name)
{
	ClapTrap::name_ = name_ + "_clap_name";
	pts_ = 100;
	nrg_pts_ = 50;
	atk_pts_ = 30;
	std::cout << "DiamondTrap < " <<  name_ << " > copy construtor called" << std::endl;
}

DiamondTrap& DiamondTrap::operator=(const DiamondTrap& obj)
{
	if (this != &obj) {
		ScavTrap::operator=(obj);
		FragTrap::operator=(obj);
		name_ = obj.name_;
		ClapTrap::name_ = name_ + "_clap_name";
		pts_ = obj.pts_;
		nrg_pts_ = obj.nrg_pts_;
		atk_pts_ = obj.atk_pts_;
	}
	std::cout << "DiamondTrap < " << name_ << " > copy assignment constructor called" << std::endl;
	return *this;
}

DiamondTrap::~DiamondTrap()
{
	std::cout << "DiamondTrap < " << name_ << " > destructor called" << std::endl;
}

void DiamondTrap::attack(const std::string& target)
{
	ScavTrap::attack(target);
}

void DiamondTrap::whoAmI()
{
	std::cout << "I am DiamondTrap < " << name_
			  << "> and my ClapTrap name is < " << ScavTrap::name_ << " >" << std::endl;
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   FragTrap.cpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha>                        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/26 00:17:45 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/09/26 22:38:56 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "FragTrap.hpp"
#include <iostream>

FragTrap::FragTrap() : ClapTrap()
{
	pts_ = 100; nrg_pts_ = 100; atk_pts_ = 30;
	std::cout << "FragTrap < " << name_ << " > default constructor called" << std::endl;
}

FragTrap::FragTrap(const std::string& name) : ClapTrap(name)
{
	pts_ = 100; nrg_pts_ = 100; atk_pts_ = 30;
	std::cout << "FragTrap < " << name_ << " > constructor called" << std::endl;
}

FragTrap::FragTrap(const FragTrap& obj) : ClapTrap(obj)
{
	std::cout << "FragTrap < " << name_ << " > copy constructor called" << std::endl;
}

FragTrap& FragTrap::operator=(const FragTrap& obj)
{
	if (this != &obj)
		ClapTrap::operator=(obj);
	std::cout << "FragTrap < " << name_ << " > copy assignment constructor called" << std::endl;
	return *this;
}

FragTrap::~FragTrap()
{
	std::cout << "FragTrap < " << name_ << " > destructor called" << std::endl;
}

void FragTrap::attack(const std::string& target)
{
	if (pts_ <= 0)
	{
		std::cout << "FragTrap < " << name_ << " > cannot attack (no hit points left)" << std::endl;
		return;
	}
	if (nrg_pts_ <= 0)
	{
		std::cout << "FragTrap < " << name_ << " > cannot attack (no energy points left)" << std::endl;
		return;
	}
	--nrg_pts_;
	std::cout << "FragTrap < " << name_ << " > blasts < " << target
	<< " >, causing < " << atk_pts_ << " > points of damage" << std::endl;
}

void FragTrap::highFivesGuys()
{
    std::cout << "FragTrap <" << name_ << "> requests a high five!" << std::endl;
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha>                        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/26 22:34:43 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/09/26 22:35:43 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <iostream>
#include "ClapTrap.hpp"
#include "ScavTrap.hpp"
#include "FragTrap.hpp"
#include "DiamondTrap.hpp"

static void banner(const std::string& t) {
    std::cout << "\n========== " << t << " ==========\n";
}

int main() {
    banner("construction chain + whoAmI");
    {
        DiamondTrap d("Dia");
        d.whoAmI();               // prints DiamondTrap name and ClapTrap name (Dia_clap_name)
        d.attack("intruder");     // must go through ScavTrap::attack
        d.beRepaired(10);
        d.takeDamage(5);
    } // observe reverse destruction (DiamondTrap -> FragTrap -> ScavTrap -> ClapTrap)

    banner("EP depletion blocks actions");
    {
        DiamondTrap e("Endurance");
        while (e.getEnergyPoints() > 0) {
            e.attack("dummy");
        }
        e.attack("one too many"); // should be blocked (no energy)
        e.beRepaired(3);          // should be blocked (no energy)
    }

    banner("HP to 0 blocks actions");
    {
        DiamondTrap f("Fragile");
        f.takeDamage(f.getHitPoints() + 42); // force HP to 0
        f.attack("blocked");          // blocked (dead)
        f.beRepaired(10);             // blocked (dead)
        f.whoAmI();                   // should say cannot run (dead)
    }

    banner("copy-construct and copy-assign");
    {
        DiamondTrap a("Alpha");
        a.attack("pre-copy");
        DiamondTrap b = a;      // copy-ctor
        b.whoAmI();
        DiamondTrap c("Temp");
        c = a;                  // copy-assign
        c.attack("post-assign");
        c.whoAmI();
    }

    banner("polymorphic delete (virtual base + virtual dtor)");
    {
        ClapTrap* p = new DiamondTrap("Poly");
        p->attack("via ClapTrap*");   // virtual -> DiamondTrap::attack -> ScavTrap::attack
        delete p;                     // ~DiamondTrap … ~ClapTrap
    }

    banner("inherited ScavTrap/FragTrap specials (optional)");
    {
        DiamondTrap z("Zed");
        // DiamondTrap inherits members; you *may* call these:
        z.guardGate();        // from ScavTrap
        z.highFivesGuys();    // from FragTrap
    }

    banner("done");
    return 0;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ScavTrap.cpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha>                        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/25 19:00:00 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/09/26 22:38:49 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ScavTrap.hpp"
#include <iostream>

ScavTrap::ScavTrap() : ClapTrap()
{
	pts_ = 100; nrg_pts_ = 50; atk_pts_ = 20;
	std::cout << "ScavTrap < " << name_ << " > default constructor called" << std::endl;
}

ScavTrap::ScavTrap(const std::string& name) : ClapTrap(name)
{
	pts_ = 100; nrg_pts_ = 50; atk_pts_ = 20;
	std::cout << "ScavTrap < " << name_ << " > constructor called" << std::endl;
}

ScavTrap::ScavTrap(const ScavTrap& obj) : ClapTrap(obj)
{
	std::cout << "ScavTrap < " << name_ << " > copy constructor called" << std::endl;
}

ScavTrap& ScavTrap::operator=(const ScavTrap& obj)
{
	if (this != &obj)
		ClapTrap::operator=(obj);
	std::cout << "ScavTrap < " << name_ << " > copy assignment constructor called" << std::endl;
	return *this;
}

ScavTrap::~ScavTrap()
{
	std::cout << "ScavTrap < " << name_ << " > destructor called" << std::endl;
}

void ScavTrap::attack(const std::string& target)
{
	if (pts_ <= 0)
	{
		std::cout << "ScavTrap < " << name_ << " > cannot attack (no hit points left)" << std::endl;
		return;
	}
	if (nrg_pts_ <= 0)
	{
		std::cout << "ScavTrap < " << name_ << " > cannot attack (no energy points left)" << std::endl;
		return;
	}
	--nrg_pts_;
	std::cout << "ScavTrap < " << name_ << " > slashes < " << target
	<< " >, causing < " << atk_pts_ << " > points of damage" << std::endl;

}

void ScavTrap::guardGate()
{
	std::cout << "ScavTrap < " << name_ << " > is now in Gate keeper mode.\n";
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ClapTrap.hpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha>                        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/24 13:00:25 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/09/26 00:51:02 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef CLAPTRAP_HPP
#define CLAPTRAP_HPP

#include <string>

class ClapTrap
{
	protected:
		std::string name_;
		int pts_;
		int nrg_pts_;
		int atk_pts_;
	public:
		ClapTrap();
		ClapTrap(const std::string& name);
		ClapTrap(const ClapTrap& obj);
		ClapTrap& operator=(const ClapTrap& obj);
		virtual ~ClapTrap();
		int getHitPoints() const;
		int getEnergyPoints() const;
		int getAttackPoints() const;
		const std::string& getName() const;
		virtual void attack(const std::string& target);
		void takeDamage(unsigned int amount);
		void beRepaired(unsigned int amount);
};

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   DiamondTrap.hpp                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha>                        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/26 13:00:41 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/09/26 19:57:36 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef DIAMONDTRAP_HPP
#define DIAMONDTRAP_HPP

#include "ScavTrap.hpp"
#include "FragTrap.hpp"

class DiamondTrap : public ScavTrap, public FragTrap
{
	private:
		std::string name_;
	public:
		DiamondTrap();
		DiamondTrap(const std::string& name);
		DiamondTrap(const DiamondTrap& obj);
		DiamondTrap& operator=(const DiamondTrap& obj);
		virtual ~DiamondTrap();
		void attack(const std::string& target);
		void whoAmI();
};

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   FragTrap.hpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha>                        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/26 00:17:42 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/09/26 22:29:52 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef FRAGTRAP_HPP
#define FRAGTRAP_HPP

#include "ClapTrap.hpp"

class FragTrap : virtual public ClapTrap
{
	public:
		static const int hitPoints;
		static const int energyPoints;
		static const int attackPoints;
		FragTrap();
		FragTrap(const std::string& name);
		FragTrap(const FragTrap& obj);
		FragTrap& operator=(const FragTrap& obj);
		~FragTrap();
		void attack(const std::string& target);
		void highFivesGuys();
};

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ScavTrap.hpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mabou-ha <mabou-ha>                        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/25 19:00:03 by mabou-ha          #+#    #+#             */
/*   Updated: 2025/09/26 22:39:37 by mabou-ha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef SCAVTRAP_HPP
#define SCAVTRAP_HPP

#include "ClapTrap.hpp"

class ScavTrap : virtual public ClapTrap
{
	public:
		static const int hitPoints;
		static const int energyPoints;
		static const int attackPoints;
		ScavTrap();
		ScavTrap(const std::string& name);
		ScavTrap(const ScavTrap& obj);
		ScavTrap& operator=(const ScavTrap& obj);
		~ScavTrap();
		void attack(const std::string& target);
		void guardGate();
};

#endif